// index.js
process.on('uncaughtException', console.error)
const {
  default: WAConnect,
  useMultiFileAuthState,
  DisconnectReason,
  fetchLatestBaileysVersion,
  makeInMemoryStore,
  Browsers,
  fetchLatestWaWebVersion
} = require("@whiskeysockets/baileys");
const pino = require("pino");
const readline = require('readline');
const { Boom } = require("@hapi/boom");
const cfonts = require('cfonts'); // Import cfonts library

const pairingCode = process.argv.includes("--pairing-code");
const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
const question = (text) => new Promise((resolve) => rl.question(text, resolve));
const store = makeInMemoryStore({ logger: pino().child({ level: "silent", stream: "store" }) });

const settings = require('./settings'); // Import pengaturan

async function WAStart() {
  cfonts.say('auto-read-sw\nby-wily-kun', { // Tampilkan teks dengan cfonts
    font: 'tiny',       
    align: 'center',
    colors: ['system'],
    background: 'transparent', 
    letterSpacing: 1,
    lineHeight: 1,
    space: true,
    maxLength: '0',
    gradient: false,
    independentGradient: false,
    transitionGradient: false,
    env: 'node'
  });

  const { state, saveCreds } = await useMultiFileAuthState(settings.sessionPath); // Path ke sesi di ambil dari settings.js
  const { version, isLatest } = await fetchLatestWaWebVersion().catch(() => fetchLatestBaileysVersion());
  console.log(`menggunakan WA v${version.join(".")}, isLatest: ${isLatest}`);

  // Tampilkan daftar fitur
  console.log("---------- Daftar Fitur ----------");
  console.log(`Auto Read Story Emoji: ${settings.autoReadStory.emoji ? "Diaktifkan" : "Dinonaktifkan"}`);
  console.log(`Status Speed: ${settings.statusSpeed.enabled ? "Diaktifkan" : "Dinonaktifkan"}`);
  console.log(`Status Speed Delay: ${settings.statusSpeed.delay} milidetik`);
  console.log(`Auto Online: ${settings.autoOnline.enabled ? "Diaktifkan" : "Dinonaktifkan"}`);
  console.log(`Auto Bio Uptime: ${settings.autoBioUptime.enabled ? "Diaktifkan" : "Dinonaktifkan"}`);
  console.log(`Auto Typing: ${settings.autoTyping.enabled ? "Diaktifkan" : "Dinonaktifkan"}`);
  console.log(`Auto Typing Off: ${settings.autoTypingOff.enabled ? "Diaktifkan" : "Dinonaktifkan"}`);
  console.log(`Status Name Source: ${settings.statusNameSource.usePushName ? "m.pushName" : "m.key.participant.split('@')[0]"}`);
  console.log(`Browser Platform: ${settings.browserPlatform}`);
  console.log(`Browser Name: ${settings.browserName}`);
  console.log("---------------------------------");

  const client = WAConnect({
    logger: pino({ level: "silent" }),
    printQRInTerminal: !pairingCode,
    browser: Browsers[settings.browserPlatform](settings.browserName), // Ambil browser platform dan nama dari settings.js
    auth: state,
  });

  store.bind(client.ev);

  if (pairingCode && !client.authState.creds.registered) {
    const phoneNumber = await question(`Silahkan masukin nomor Whatsapp kamu: `);
    let code = await client.requestPairingCode(phoneNumber);
    code = code?.match(/.{1,4}/g)?.join("-") || code;
    console.log(`⚠︎ Kode Whatsapp kamu : ` + code)
  }

  // Auto Online
  if (settings.autoOnline.enabled) {
    client.ev.on("connection.update", async (update) => {
      const { connection } = update;
      if (connection === "open") {
        console.log("Koneksi terbuka, bot online");
        await client.updatePresence(update.jid, "available"); // Tetap online
      }
    });
  }

  // Auto Typing
  if (settings.autoTyping.enabled) {
    client.ev.on("messages.upsert", async (chatUpdate) => {
      try {
        const m = chatUpdate.messages[0];
        if (!m.key.fromMe && m.key.remoteJid !== 'status@broadcast') {
          await client.sendPresenceUpdate('composing', m.key.remoteJid); // Tampilkan sedang mengetik
          setTimeout(async () => {
            await client.sendPresenceUpdate('paused', m.key.remoteJid); // Hentikan tampilan sedang mengetik
          }, 3000); // Tunggu selama 3 detik
        }
      } catch (err) {
        console.log(err);
      }
    });
  }

  // Auto Typing Off
  if (settings.autoTypingOff.enabled) {
    client.ev.on("messages.upsert", async (chatUpdate) => {
      try {
        const m = chatUpdate.messages[0];
        if (!m.key.fromMe && m.key.remoteJid !== 'status@broadcast') {
          await client.sendPresenceUpdate('paused', m.key.remoteJid); // Hentikan tampilan sedang mengetik
        }
      } catch (err) {
        console.log(err);
      }
    });
  }

  let startTime = Date.now(); // Catat waktu mulai bot

  // Auto Bio Uptime
  if (settings.autoBioUptime.enabled) {
    setInterval(async () => {
      const uptime = getUptime(startTime);
      const uptimeText = `Bot aktif selama ${uptime}`;
      await client.updateProfileStatus(uptimeText);
      console.log("Bio diupdate: " + uptimeText);
    }, settings.autoBioUptime.updateInterval);
  }

  client.ev.on("messages.upsert", async (chatUpdate) => {
    //console.log(JSON.stringify(chatUpdate, undefined, 2))
    try {
      const m = chatUpdate.messages[0];
      if (!m.message) return;

      const maxTime = 5 * 60 * 1000; // 5 menit

      if (m.key && !m.key.fromMe && m.key.remoteJid === 'status@broadcast') {
        if (!m.message.reactionMessage) {
          const allowedSenders = [
            "6281447345627@s.whatsapp.net",
            "628145563553@s.whatsapp.net",
          ];

          if (!allowedSenders.includes(m.key.participant)) {
            // Cek pengaturan autoReadStory
            if (settings.autoReadStory.emoji) { 
              // Gunakan daftar emoji dari settings
              const emojis = settings.emojis; 

              function getRandomEmoji() {
                const randomIndex = Math.floor(Math.random() * emojis.length);
                return emojis[randomIndex];
              }

              const randomEmoji = getRandomEmoji();
              try {
                await client.sendMessage("status@broadcast", {
                  react: { text: randomEmoji, key: m.key },
                }, { statusJidList: [m.key.participant] });

                await client.readMessages([m.key]);
                // Gunakan m.pushName atau m.key.participant.split('@')[0]
                const senderName = settings.statusNameSource.usePushName ? m.pushName : m.key.participant.split('@')[0];
                console.log(`AUTO LIHAT STATUS : ${senderName} ${randomEmoji}`); 
              } catch (error) {
                console.error('Error', error);
              }
            } 
            // Cek pengaturan status speed
            if (settings.statusSpeed.enabled) {
              const currentTime = Date.now();
              const messageTime = m.messageTimestamp * 1000;
              const timeDiff = currentTime - messageTime;

              if (timeDiff <= settings.statusSpeed.delay) { 
                // ... (Kode lama untuk react emoji)
              }
            }
          }
        }
      }
    } catch (err) {
      console.log(err);
    }
  });


  client.ev.on("connection.update", async (update) => {
    const { connection, lastDisconnect } = update;
      if (connection === "close") {
        let reason = new Boom(lastDisconnect?.error)?.output.statusCode;
        if (reason === DisconnectReason.badSession) {
          console.log(`File Sesi Salah, Harap Hapus Sesi dan Pindai Lagi`);
          process.exit();
        } else if (reason === DisconnectReason.connectionClosed) {
          console.log("Koneksi ditutup, menyambung kembali....");
          WAStart();
        } else if (reason === DisconnectReason.connectionLost) {
          console.log("Koneksi Hilang dari Server, menyambung kembali...");
          WAStart();
        } else if (reason === DisconnectReason.connectionReplaced) {
          console.log("Koneksi Diganti, Sesi Baru Dibuka, Harap Mulai Ulang Bot");
          process.exit();
        } else if (reason === DisconnectReason.loggedOut) {
          console.log(`Perangkat Keluar, Harap Hapus Folder Sesi dan Pindai Lagi.`);
          process.exit();
        } else if (reason === DisconnectReason.restartRequired) {
          console.log("Restart Dibutuhkan, Memulai Ulang...");
          WAStart();
        } else if (reason === DisconnectReason.timedOut) {
          console.log("Koneksi Habis Waktu, Menyambung Kembali...");
          WAStart();
        } else {
          console.log(`Alasan Pemutusan Koneksi Tidak Diketahui: ${reason}|${connection}`);
          WAStart();
        }
      } else if (connection === "open") {
      console.log("Terhubung ke Readsw");
    }
  });

  client.ev.on("creds.update", saveCreds);

  return client;
}

WAStart();

function getUptime(startTime) {
  const elapsedTime = Date.now() - startTime;
  const days = Math.floor(elapsedTime / (1000 * 60 * 60 * 24));
  const hours = Math.floor((elapsedTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((elapsedTime % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((elapsedTime % (1000 * 60)) / 1000);

  if (days > 0) {
    return `${days} hari, ${hours} jam, ${minutes} menit, ${seconds} detik`;
  } else if (hours > 0) {
    return `${hours} jam, ${minutes} menit, ${seconds} detik`;
  } else if (minutes > 0) {
    return `${minutes} menit, ${seconds} detik`;
  } else {
    return `${seconds} detik`;
  }
}
